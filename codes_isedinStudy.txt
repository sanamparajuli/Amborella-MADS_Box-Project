****************************Codes/Scripts used in the study*******************************
******************************************************************************************

1. Downloading the Genome files from Phytozome (command-line download)

(bash)
$ curl --cookie jgi_session=/api/sessions/634ed9c2fade95c571268701695b0281 
--output download.20240129.144356.zip -d "{\"ids\":{\"Phytozome-291\":[\"5a1f33747ded5e41c3079ee2\",\"539f7ed70d878514c2d0e0f8\",\"58a238e27ded5e341aa7f885\",\"539f7ed80d878514c2d0e0f9\",\"539f7ed90d878514c2d0e0fc\",\"55fca0c50d8785306f968f93\",\"56901a500d878508e3d1fb68\",\"65370172f073fe7ce392014f\",\"56981cdc0d87851ee9727d19\",\"539f7ed50d878514c2d0e0f2\",\"539f7ed60d878514c2d0e0f4\",\"56981cdc0d87851ee9727d16\",\"56981cdc0d87851ee9727d1e\",\"5f6bb35c7a4cf8208a33e061\",\"539f7ed80d878514c2d0e0fa\",\"539f7ed80d878514c2d0e0fb\",\"539f7ed90d878514c2d0e0fd\",\"539f7eda0d878514c2d0e0fe\"]}}" -H "Content-Type: application/json" https://files-download.jgi.doe.gov/filedownload/ -k

******************************************************************************************

2. Hidden-Markov Model-based survey

#generate a multiple sequence alignment of all Arabidopsis MADS-Box proteins in Muscle
(bash)
$ conda activate muscle
$ muscle -align /path/to/atMADS.fasta -output /out_path/to/atMADS_aligned.fasta #atMADS.fasta is arabidopsis madsbox proteins fasta file

#use the alignment file to generate a hidden markov model (hmm) profile
$ module load hmmer
$ hmmbuild /path/to/atMADS_aligned.fasta /out_path/to/atmadshmm.hmm

#download and unzip the SRF-type MADS-Box Hidden Markov Model (PF00319) from InterPro
$ gunzip /path/to/PF00319.hmm.gzip

#use the self-created (atmadshmm) and PF00319 hmm profile against the Amborella proteome to extract putative MADS-Box proteins

##hmmer1
$ hmmsearch --tblout /out_path/to/amtrhmmer1.txt -E 0.1 /path/to/atmadshmm.hmm /path/to/Atrichopoda_291_v1.0.protein.fa

##hmmer2
$ hmmsearch --tblout /out_path/to/amtrhmmer2.txt -E 0.1 /path/to/ PF00319.hmm /path/to/Atrichopoda_291_v1.0.protein.fa
******************************************************************************************

3. Extract sequences of all putative hits (IDs in "seqids.txt") from the proteome file

(bash)
$ conda activate seqtk
$ seqtk subseq /path/to/Atrichopoda_291_v1.0.protein.fa /path/to/seqids.txt > /out_path/to/AmtrHMMER1and2.fa
******************************************************************************************

4. Domain Confirmation with InterProScan (pfam, smart, cdd)

(bash)
$ module load interproscan
$ interproscan.sh --cpu 8 -t p -i /path/to/AmtrHMMER1and2.fa -o /out_path/to/AMTRinterpro.tsv -f TSV -appl Pfam,SMART,CDD
******************************************************************************************

5. Re-extract sequences with confirmed MADS-Box domain

(bash)
$ seqtk subseq /path/to/ Atrichopoda_291_v1.0.protein.fa /path/to/final_seqids.txt > amtrMADS.fa
******************************************************************************************

6. Phylogenetic Tree and Classification

(bash)
#combine arabidopsis and amborella mads box protein fasta files
$ cat /path/to/atMADS.fa /path/to/amtrMADS.fa > /out_path/to/allMADS.fa

#multiple sequence alignment
$ conda activate muscle
$ muscle -align /path/to/allMADS.fa -output /out_path/to/allMADS.aligned.fasta

#iqtree phylogenetic analysis with model finder, 1000 bootstraps
$ module load iqtree
$ iqtree2 -s /path/to/allMADS.aligned.fasta -b 1000 -m TEST -T AUTO
******************************************************************************************

7. Reciprocal Best Hit (RBH)

(bash)
$ module load ncbi-blast
$ blastp -subject /path/to/atMADS.fa -query /path/to/amtrMADS.fa -outfmt 6 -out blast1.txt
$ blastp -query /path/to/atMADS.fa -subject /path/to/amtrMADS.fa -outfmt 6 -out blast2.txt

******************************************************************************************

8. Conserved Motif Analysis with MEME

(bash)
$ module load meme
$ meme /path/to/amtrMADS.fa -protein -oc . -nostatus -time 14400 -mod zoops -nmotifs 10 -minw 6 -maxw 200 -objfun classic -markov_order 0
******************************************************************************************

9. Extracting 2000 bp upstream region for cis-element analysis

(bash)
#write a script extract_promoters.py
$ nano extract_promoters.py

(python)
#start of the script
pip install biopython

from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from Bio.Seq import Seq

def extract_promoters(gff_file, genome_file, output_file, upstream=2000):
    # Load genome
    genome = SeqIO.to_dict(SeqIO.parse(genome_file, "fasta"))
    
    promoter_sequences = []

    # Parse GFF file for gene coordinates
    with open(gff_file, "r") as gff:
        for line in gff:
            if line.startswith("#"):
                continue  # Skip headers

            parts = line.strip().split("\t")
            if len(parts) < 9 or parts[2] != "gene":
                continue  # Only consider gene entries

            chrom = parts[0]
            start = int(parts[3])
            end = int(parts[4])
            strand = parts[6]
            gene_id = parts[8].split(";")[0].split("=")[1]

            if strand == "+":
                promoter_start = max(0, start - upstream)
                promoter_end = start
            else:
                promoter_start = end
                promoter_end = min(len(genome[chrom].seq), end + upstream)

            promoter_seq = genome[chrom].seq[promoter_start:promoter_end]
            if strand == "-":
                promoter_seq = promoter_seq.reverse_complement()

            promoter_record = SeqRecord(promoter_seq, id=gene_id, description=f"{chrom}:{promoter_start}-{promoter_end} ({strand})")
            promoter_sequences.append(promoter_record)

    # Write the promoter sequences to output FASTA
    with open(output_file, "w") as out_fasta:
        SeqIO.write(promoter_sequences, out_fasta, "fasta")

# Usage
gff_file = "/path/to/annotation.gff"
genome_file = "/path/to/genome.fasta"
output_file = "./promoters_2000bp.fasta"
extract_promoters(gff_file, genome_file, output_file, upstream=2000)

#end of script

(bash)
$ module load python
$ python3 extract_promoters.py

#use the fasta file thus generated against the PlantCARE database for identifying cis-elements
******************************************************************************************

10. MCScanX Collinearity

(bash)
#whole genome blastp
$ module load ncbi-blast
$ blastp -subject /path/to/at_proteins.fa -query /path/to/amtrproteins.fa -outfmt 6 -out /out_path/to/blast1.txt
$ blastp -query /path/to/atMADS.fa -subject /path/to/amtrMADS.fa -outfmt 6 -out /out_path/to/blast2.txt
$ cat /path/to/blast1.txt /path/to/blast2.txt > /out_path/to/formcscan.blast

#generate a formcscan.gff file from gff files of both genomes in the format 'chr#/geneID/start/end'

#use the .blast and .gff file as inputs for mcscanx to generate a .collinearity file
$ /path/to/MCScanX formcscan

#use the built-in MCScan utilities in TBTools-II to generate linked region file and dual synteny plot

******************************************************************************************
11. Gene Expression Analysis
#accessing the gene expression data from BioProjects
#downloading RNASeq fastq files for BioProject PRJNA748676

(bash)
$nano PRJNA748676.sh
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/099/SRR15206999/SRR15206999_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/093/SRR15206993/SRR15206993_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/096/SRR15206996/SRR15206996_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/086/SRR15206986/SRR15206986_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/087/SRR15206987/SRR15206987_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/002/SRR15207002/SRR15207002_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/003/SRR15207003/SRR15207003_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/098/SRR15206998/SRR15206998_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/004/SRR15207004/SRR15207004_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/092/SRR15206992/SRR15206992_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/091/SRR15206991/SRR15206991_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/094/SRR15206994/SRR15206994_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/093/SRR15206993/SRR15206993_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/000/SRR15207000/SRR15207000_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/090/SRR15206990/SRR15206990_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/085/SRR15206985/SRR15206985_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/097/SRR15206997/SRR15206997_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/089/SRR15206989/SRR15206989_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/004/SRR15207004/SRR15207004_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/000/SRR15207000/SRR15207000_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/003/SRR15207003/SRR15207003_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/001/SRR15207001/SRR15207001_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/089/SRR15206989/SRR15206989_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/086/SRR15206986/SRR15206986_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/095/SRR15206995/SRR15206995_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/098/SRR15206998/SRR15206998_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/088/SRR15206988/SRR15206988_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/094/SRR15206994/SRR15206994_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/096/SRR15206996/SRR15206996_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/099/SRR15206999/SRR15206999_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/085/SRR15206985/SRR15206985_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/090/SRR15206990/SRR15206990_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/088/SRR15206988/SRR15206988_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/097/SRR15206997/SRR15206997_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/091/SRR15206991/SRR15206991_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/092/SRR15206992/SRR15206992_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/001/SRR15207001/SRR15207001_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/002/SRR15207002/SRR15207002_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/095/SRR15206995/SRR15206995_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR152/087/SRR15206987/SRR15206987_1.fastq.gz

#downloading the files
(bash)
$ chmod +x ./PRJNA748676.sh
$ ./PRJNA748676.sh

#RNASeq fastq files for BioProject PRJEB38698

(bash)
$ nano PRJEB38698.sh
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/004/ERR4193694/ERR4193694_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/009/ERR4193709/ERR4193709_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/002/ERR4193692/ERR4193692_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/000/ERR4193690/ERR4193690_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/001/ERR4193691/ERR4193691_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/007/ERR4193707/ERR4193707_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/003/ERR4193693/ERR4193693_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/006/ERR4193706/ERR4193706_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/000/ERR4193700/ERR4193700_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/008/ERR4193708/ERR4193708_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/004/ERR4193694/ERR4193694_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/000/ERR4193710/ERR4193710_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/001/ERR4193711/ERR4193711_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/001/ERR4193701/ERR4193701_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/002/ERR4193702/ERR4193702_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/008/ERR4193698/ERR4193698_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/009/ERR4193699/ERR4193699_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/003/ERR4193703/ERR4193703_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/007/ERR4193697/ERR4193697_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/000/ERR4193700/ERR4193700_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/000/ERR4193690/ERR4193690_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/008/ERR4193698/ERR4193698_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/001/ERR4193701/ERR4193701_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/009/ERR4193709/ERR4193709_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/003/ERR4193703/ERR4193703_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/002/ERR4193702/ERR4193702_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/009/ERR4193699/ERR4193699_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/001/ERR4193691/ERR4193691_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/002/ERR4193692/ERR4193692_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/008/ERR4193708/ERR4193708_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/007/ERR4193697/ERR4193697_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/003/ERR4193693/ERR4193693_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/001/ERR4193711/ERR4193711_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/006/ERR4193706/ERR4193706_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/007/ERR4193707/ERR4193707_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/000/ERR4193710/ERR4193710_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/003/ERR4193723/ERR4193723_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/009/ERR4193729/ERR4193729_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/004/ERR4193724/ERR4193724_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/000/ERR4193730/ERR4193730_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/001/ERR4193731/ERR4193731_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/002/ERR4193732/ERR4193732_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/007/ERR4193737/ERR4193737_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/003/ERR4193733/ERR4193733_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/006/ERR4193726/ERR4193726_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/005/ERR4193725/ERR4193725_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/004/ERR4193724/ERR4193724_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/006/ERR4193736/ERR4193736_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/005/ERR4193735/ERR4193735_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/008/ERR4193718/ERR4193718_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/009/ERR4193719/ERR4193719_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/007/ERR4193717/ERR4193717_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/001/ERR4193731/ERR4193731_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/005/ERR4193715/ERR4193715_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/004/ERR4193714/ERR4193714_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/000/ERR4193730/ERR4193730_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/002/ERR4193732/ERR4193732_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/003/ERR4193733/ERR4193733_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/007/ERR4193737/ERR4193737_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/004/ERR4193734/ERR4193734_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/002/ERR4193722/ERR4193722_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/003/ERR4193723/ERR4193723_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/009/ERR4193729/ERR4193729_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/005/ERR4193735/ERR4193735_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/006/ERR4193736/ERR4193736_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/007/ERR4193717/ERR4193717_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/009/ERR4193719/ERR4193719_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/004/ERR4193734/ERR4193734_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/008/ERR4193718/ERR4193718_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/005/ERR4193715/ERR4193715_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/006/ERR4193726/ERR4193726_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/004/ERR4193714/ERR4193714_2.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/005/ERR4193725/ERR4193725_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR419/002/ERR4193722/ERR4193722_1.fastq.gz

#downloading the files
(bash)
$ chmod +x ./PRJEB38698.sh
$ ./PRJEB38698.sh

#deflate the files
(bash)
$ gunzip *.gz

#quality control
(bash)
$ module load fastqc
$ fastqc /path/to/*.fastq -o ./path/to/out_dir
$ module load multiqc
$ multiqc /path/to/allfastqc

#all files passed the quality check

#Salmon indexing and quantification
##indexing
### Extracting the name of genome targets to a decoys.txt file
(bash)
$ grep "^>" < <genome.fa> | cut -d " " -f 1 > decoys.txt
sed -i.bak -e 's/>//g' decoys.txt

### concatenating the transcriptome and genome
(bash)
$ cat /path/to/cds.fa /path/to/genome.fa > /out_path/to/gentrome.fa

### building a salmon index
(bash)
$ module load salmon
$ salmon index -t /path/to/gentrome.fa -d /path/to/decoys.txt -p 12 -i amtr_index

### Mapping RNASeq files to the index (do this for each pair of reads)
(bash)
$ salmon quant -i /path/to/amtr_index -l A -1 /path/to/forwardread.fastq -2 path/to/reverseread.fastq --validateMappings -o /path/to/output_dir/quantfile_quant

###merging quant.sf files (for a treatment group)
(bash)
$ salmon quantmerge --column numreads --quants /path/to/quantFileDirectories -o /path/to/output/ merged_numreads.sf #change numreads to tpm for merged_tpm quant file

### merge the numreads and tpm files for both treatments (in an experiment) to create a merged .sf file, then convert it to a .csv file

###Differential expression analysis with DESeq2 (example R script for Mature Flowers experiment, similar approach for Floral Buds Experiment)

(R)

library(DESeq2)
library(tidyverse)
library(ggrepel)

counts_data<-read.csv('all_numreads.csv', row.names = 1)
head(counts_data)

#readsampleinfo_or_designdata
colData <- read_csv("metadata.csv") #a file that has sample info

#set the factor level (lets compare females against males as reference first)
colData$Sex <- factor(colData$Sex)
colData$Sex <- relevel(colData$Sex, ref="Male")

#round up non-integer val
non_integer_values <- any(!is.integer(counts_data))
if (non_integer_values) {
  counts_data <- round(counts_data)
}

#prepare the deseq2 dataset
dds <- DESeqDataSetFromMatrix(countData = counts_data,
                              colData = colData,
                              design = ~ Sex)

#run deseq function
dds <- DESeq(dds)

#extract genes of interest
mads <- readLines("amtr_madslist.txt") #this file contains the list of Amborella mads box genes
dds_mads <- dds[mads, ]
dds_mads

res0.05 <- results(dds_mads, alpha=0.05)
summary(res0.05)


#extracting matrix of log2FC
write.csv(res0.05, file="mads_only_reference_male_0.05.csv", row.names=TRUE)

#volcanoplot

library(EnhancedVolcano)

res_df <- as.data.frame(res0.05)

res_df <- na.omit(res_df)

write.csv(res_df, file="res_df_ref_male.csv")
colnames(res_df)[0] <- "Gene"

for_volcano <- read.csv("res_df_ref_male.csv")
library(svglite)
# Open an SVG device
svg("volcano_plot.svg", width = 8, height = 6)

EnhancedVolcano(for_volcano, 
                x="log2FoldChange", y="padj", 
                lab=for_volcano$X, labSize=4.0,
                drawConnectors = TRUE,
                widthConnectors = 0.5, 
                boxedLabels = FALSE,
                legendPosition = "bottom",
                legendLabSize = 12,
                legendIconSize = 4,
                title="",
                gridlines.major = FALSE,
                gridlines.minor = FALSE
                )

dev.off()

#for PCA plot
#normalized counts
norm_counts <- counts(dds_mads, normalized=TRUE)

norm_counts_t <- t(norm_counts) #transposing

norm_counts_t_cleaned <- norm_counts_t[, !(apply(norm_counts_t, 2, var)==0)] #removing genes with sum=0

pca <- prcomp(norm_counts_t_cleaned, scale=TRUE)

pca_df <- as.data.frame(pca$x)
pca_df$Sample <- rownames(pca_df)
pca_df <- merge(pca_df, colData, by="Sample") #merging and assignign sample names for labeling

ggplot(pca_df, aes(x = PC1, y = PC2, color = Sex, label = Sample)) +
  geom_point(size = 3) +  # Points for each sample
  geom_text(vjust = 2.0) +
  stat_ellipse(level = 0.95) +  # 95% confidence ellipses
  theme_minimal() +
  labs(title = "PCA plot with 95% CI ellipses",
       x = paste0("PC1: ", round((pca$sdev[1]^2 / sum(pca$sdev^2)) * 100, 2), "% variance"),
       y = paste0("PC2: ", round((pca$sdev[2]^2 / sum(pca$sdev^2)) * 100, 2), "% variance"))


###Script for HeatMap using merged TPM file (R script for Mature Flowers experiment, similar approach for Floral Buds Experiment)

(R)
counts <- read.csv("all_tpm.csv") #merged tpm file
names <- read.csv("names_change.csv", header=FALSE) #renaming the genes based on orthology
colnames(names)[1] <- "Name"
merged <- merge(names, counts, by="Name")
merged <- merged[, -1]
colnames(merged)[1] <- "Gene"
rownames(merged) <- merged$Gene
merged <- merged[, -1]

library(pheatmap)
#z-transformation of merged counts
merged_z <- t(scale(t(merged)))
merged_z_matrix <- as.matrix(merged_z)
merged_z_matrix_z_matrix <- na.omit(merged_z_matrix)
pheatmap(merged_z_matrix,
         scale = "none",
         clustering_distance_rows = "euclidean", 
         clustering_distance_cols = "euclidean", 
         clustering_method = "complete",
         color = colorRampPalette(c("blue","white", "red"))(10))

******************************************************************************************


